plugins {
    id 'java'
    id 'maven'
    id 'signing'
    id 'nu.studer.credentials' version '1.0.1'
    id 'com.github.johnrengelman.shadow' version '1.2.4'
//    id 'io.codearte.nexus-staging'
}

group = 'com.exsoloscript.challonge'
archivesBaseName = 'challonge-java'
version = '1.0.2-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile group: 'com.squareup.retrofit2', name: 'retrofit', version: property('retrofit2.version')
    compile group: 'com.squareup.retrofit2', name: 'converter-gson', version: property('retrofit2.gson.version')
    compile group: 'com.squareup.okhttp3', name: 'logging-interceptor', version: property('okhttp.logging')
    compile group: 'commons-codec', name: 'commons-codec', version: property('commons.codec.version')
    compile group: 'org.apache.commons', name: 'commons-lang3', version: property('commons.lang3.version')
    compile group: 'com.google.inject', name: 'guice', version: property('guice.version')
    compile group: 'com.google.inject.extensions', name: 'guice-multibindings', version: property('guice.version')
    compile group: 'org.projectlombok', name: 'lombok', version: property('lombok.version')
    // testing
    testCompile group: 'junit', name: 'junit', version: property('junit.version')
}

allprojects { ext."signing.password" = credentials.signingPassword }

test {
    environment 'CHALLONGE_USERNAME', System.getenv().containsKey('CHALLONGE_USERNAME') ? System.getenv('CHALLONGE_USERNAME') : challongeUsername
    environment 'CHALLONGE_API_KEY', System.getenv().containsKey('CHALLONGE_API_KEY') ? System.getenv('CHALLONGE_API_KEY') : challongeApiKey
    filter {
        includeTestsMatching 'com.exsoloscript.challonge.ChallongeTestSuite'
    }
}

shadowJar {
    // this overrides the original artifact
    classifier = null
    dependencies {
        exclude(dependency('junit:junit'))
        exclude(dependency('org.hamcrest:hamcrest-core'))
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives shadowJar, javadocJar, sourcesJar
}

if (project.hasProperty('release')) {

    allprojects {
        apply plugin: 'signing'
        apply plugin: 'maven'

        // Signature of artifacts
        signing {
            sign configurations.archives
        }

        // OSSRH publication
        uploadArchives {
            repositories {
                mavenDeployer {
                    // POM signature
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    // Target repository
                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    // Snapshot repository
                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    pom.project {
                        name 'challonge-java'
                        packaging 'jar'

                        description 'Java binding for the CHALLONGE! REST Api'

                        scm {
                            connection 'scm:git:git://github.com/stefangeyer/challonge-java.git'
                            developerConnection 'scm:git:git@github.com/stefangeyer/challonge-java.git'
                            url 'http://github.com/stefangeyer/challonge-java/tree/master'
                        }

                        licenses {
                            license {
                                name 'MIT'
                                url 'https://opensource.org/licenses/MIT'
                            }
                        }

                        developers {
                            developer {
                                id 'stefangeyer'
                                name 'Stefan Geyer'
                            }
                        }
                    }
                }
            }
        }
    }
}

//nexusStaging {
//    username = ossrhUsername
//    password = ossrhPassword
//}